TASK 5
	Q. Comparing the different intialisation methods.
	A. Below details are just for comparision purposes -

		|  Initialization 	|  								Command used 								|  		Cost 		| 	Iterations 	|
		|		Random		| 	python3 hillclimb.py --file data/berlin52.tsp --r2seed 2 --task 2		| 8011.125234202166	|	   50+		|
		| Nearest Neighbour	|   python3 hillclimb.py --file data/berlin52.tsp --start_city 1 --task 3	| 7841.387787835105	|	   11		|	
		| Euclidiean Approx |	python3 hillclimb.py --file data/berlin52.tsp --start_city 1 --task 4	| 7713.034759376225	|	   12		|

	 	By running this on some more random seeds and for different start cities, we make these three observations from task(i)_submit.png -
	 	i)	 The number of iteration for Random Initialization is seen to be very high compared to Nearest Neighbour and Euclidiean Approx.
	 	ii)	 The tour generated by Euclidiean Approx is of a better quality, i.e. it has a lesser cost as compared to Nearest Neighbour and Random.
	 	iii) It seems that the number of iterations for Euclidiean Approx are a bit more (one in this case) than Nearest Neighbour Initialization.

	 	All of them are giving close final minimas in terms of cost. The major difference is that for Random we usually have to do a lot more iterations to get to a minima since it starts from a very large value. On the other hand Nearest Neighbour and Euclidiean are good approximations so the cost of initial task is small. Between Nearest Neighbour and Euclidean, they lead to the minima in comparable number of iterations. Also the final cost is very close; sometimes nearest neighbour gives lower value and sometimes Euclidean.

	 	It seems fomr above observations that - 
	 	i) 	Number of Iterations 	: Random > Euclidiean Approx > Nearest Neighbour
	 	ii) Cost of final tour 		: Random > Nearest Neighbour > Euclidiean Approx

	 	After studying about these initializations I found out the following - 
	 	i) 	Number of Iterations 	: Random > Nearest Neighbour > MST 
	 		Although in the above observations, we have iteration for MST > Nearest Neighbour, in a general case getting fewer number of iterations for MST is more probable.
	 	ii) Cost of final tour 		: Random > Nearest Neighbour > MST
	 		This is same as we had observed. For Nearest Neighbour initialization initial cost of tour <= O(log(number_of_verticies)), whereas for MST it is <= 2 * optimum_cost
	 		Although this directly doesnt imply anything about the final costs but is seems to be that the final costs would be lesser for Euclidiean Approx.

TASK 6
	Q. Visually inspect the two graphs task2_submit.png and task6_submit.png. Comment on which neighbour-generating method is better (if at all) and why?
	A. We make the following observations in this case - 
		i)	The number of iterations for 2 Opt + 3 Opt are lesser than the number of iterations in 2 Opt.
		ii)	The final tour cost for 2 Opt + 3 Opt are lesser than the final tour costs in 2 Opt.

		This leads to the conclusion that the 2 Opt + 3 Opt Neighbourhoods is a better method than simply 2 Opt. This behaviour is expected as the latter (2 Opt) is a subset of the former (2 Opt + 3 Opt). Hence we can always say that 2 Opt + 3 Opt is atleast as good, if not better than 2 Opt. Also we know that a 3 Opt can be obtained by series of 2 Opt neighbourhoods. Hence at each iteration of 2 Opt + 3 Opt we have explored more tours than that of 2 Opt, hence it seems fair to say that the number of iterations in the former case will be lesser than the latter. Please note that all these compaprisions need to be made for the same random initializations. It is not sensible to compare them on different initilizations. 

TASK 7
	Q. Compare the two graphs task3_submit.png and task7_submit.png. Comment your opinion on which neighbour generating method is better in this case and why?
	A. We make the following observations in this case - 
		i)	The number of iterations for 2 Opt + 3 Opt are lesser than the number of iterations in 2 Opt.
		ii)	The final tour cost for 2 Opt + 3 Opt are lesser than the final tour costs in 2 Opt.

		|	Start city  |	Opt 2 (Iterations) 	|	Opt 2 + 3 (Iterations) 	|  Opt 2 (Cost) |	Opt 2 + 3 (Cost) |
		|	 	1		|			16			|			11				|	  ~690		|		~685  		 |
		|		2		|			12			|			10				|	  ~695		|		~695 		 |	
		|		3		|			9			|			9				|	  ~740		|		~700		 |
		|		4		|			11			|			11				|	  ~720		|		~695		 |
		|		5		|			14			|			11				|	  ~690		|		~690		 |

	   As discussed above, the reason for optimality of 2 Opt + 3 Opt is that a potentially larger set of tours is observed in this case than that of 2 Opt alone. Hence all the arguments made above for  2 Opt + 3 Opt being atleast as good, if not better than 2 Opt still hold. Not that even in this case since the initializations are same there isnt any dependence of final costs while comparing the two. 


TASK 8
	Q. Compare the graphs task4_submit.png and task8_submit.png. Comment your opinion on which neighbour generating method is better in this case and why?
	A. We make the following observations in this case - 
		i)	The number of iterations for 2 Opt + 3 Opt almost same as that of 2-Opt
		ii)	The final tour cost for 2 Opt + 3 Opt is almost same as that of 2 Opt.

		|	Opt 2 (Iterations) 	|	Opt 2 + 3 (Iterations) 	|  Opt 2 (Cost) |	Opt 2 + 3 (Cost) |
		|			17			|			16				|	  ~710		|		~700  		 |

	   We observe here that only a marginal improvement is there in both cost and number of iterations as compared to the previous case. This is most probably because be have used Euclidean Aproxmiation for initialization. This initialization is already very close to the final costs, hence a solution can be easily found by simply using 2 Opt instead of a commbined 2+3 Opt Neighbourhood search. This observation specific to this case as the initialization was close to the final cost. This might not be true for the case of random initializations and hence we get substantial differnce in number of iterations and tour costs as seen in the above two cases. 